/*
  TODO:
    1. Refine column classname defs
      - Use grid-column and grid-row instead of grid-row-start et al.
    2. Read through all of blueprint codebase to make sure we arent missing
       any useful bits of shorthand et al
      - The flexbox-like spacing things (vertical-start et al) seem useful
    3. Compile, test, and cut a release already
*/



/*
 *    Grid defaults
 *      There's more than one way to scaffold a grid, so this stuff keeps
 *      our grids close enough to flexbox-style grids to fall back easily,
 *      and the placeholder selector ensures that our breakpoint-specific
 *      BEM-style classes will cascade over each other properly.
 */

@mixin display-grid {
  display: grid !important;
  grid-gap: map-get($gutter, "desktop");
  grid-template-rows: auto;
  grid-template-columns: repeat($cols, 1fr);
}

%grid-helpers-base {
  @include media-breakpoint-up(x) {
		@include display-grid;
		grid-template-columns: $default-smallest-col-width;
	}
}

/*
 *    Container definitions
 *      Not technically "necessary" for CSS grid, but allow us to:
 *      1. Trivially implement adaptive breakpoints
 *      2. Break out of the grid on a per-component basis
 *      3. Fall back to flexbox
 */

.container {
	position: relative;
  z-index: 1;
	width: 100%;
  margin: 0 auto;
  padding: 0 map-get($gutter, "desktop");
  @each $grid-widths, $width in $grid-widths {
		@include media-breakpoint-up(#{$grid-widths}) {
			max-width: #{$width};
		}
	}

  &.show-grid {
    border: 1px dotted #9a9a9a;
  }
}

.container-full {
	@extend .container;
  width: 100%;
  padding: 0;
  @each $grid-widths, $width in $grid-widths {
		@include media-breakpoint-up(#{$grid-widths}) {
			max-width: 100%;
		}
	}
}

/*
 *    Row definitions
 */

.row {
	@extend %grid-helpers-base;
}

/*
 *    Non-standard-grid utility rows
 */

@for $i from 1 through 12 {
  /* When you need to reset the default to something besides the default */
  @include media-breakpoint-up("portrait") {
    .row-of-#{$i} {
      grid-template-columns:  repeat(#{$i}, 1fr);
    }
  }

  /* When there's one breakpoint where it's a FIVE-up */
  @include media-breakpoint-up("all") {
    .row-of-#{$i}-all         { grid-template-columns: repeat(#{$i}, 1fr); }
  }
  @include media-breakpoint-up("mobile") {
    .row-of-#{$i}-mobile      { grid-template-columns: repeat(#{$i}, 1fr); }
  }
  @include media-breakpoint-up("portrait") {
    .row-of-#{$i}-portrait    { grid-template-columns: repeat(#{$i}, 1fr); }
  }
  @include media-breakpoint-up("landscape") {
    .row-of-#{$i}-landscape   { grid-template-columns: repeat(#{$i}, 1fr); }
  }
  @include media-breakpoint-up("desktop") {
	   .row-of-#{$i}-desktop    { grid-template-columns: repeat(#{$i}, 1fr); }
  }
  @include media-breakpoint-up("widescreen") {
	   .row-of-#{$i}-widescreen { grid-template-columns: repeat(#{$i}, 1fr); }
  }
}

/*
 *    Column defintions
 */

.col {
	position: relative;
	margin-bottom: map-get($content-padding, "desktop");
}

.col-auto {
	grid-column-start: auto;
  grid-column-end: auto;
}

.row-no-bottom {
	.col {
    margin-bottom: 0;
  }
}

// .col-m-to-n
@for $i from 1 through 11 {
  @for $j from 2 through 12 {
    @if $j > $i and $j <= 12 {
      .col-#{$i}-to-#{$j} {
        grid-column: #{$i} / span #{$j - $i};
      }
    }
  }
}


/*
    On mobile, make sure the "row of X" convenience functions don't
    show up on mobile. No "row of 5" at 375px, please
*/

@media screen and (max-width: map-get($screen-widths, "portrait")) {
  @for $i from 2 through 12 {
    .row-of-#{$i}:not(.row-of-#{$i}-all):not(.row-of-#{$i}-mobile)) {
      @include media-breakpoint-up(all) {
        grid-template-columns: repeat(1, 1fr);
        .col, [class*='col-'] {
          grid-column-start: auto;
          grid-column-end: auto;
        }
      }
    }
  }
}
